name: Apply

on:
  push:
      branches:
          - main
      paths:
          - 'changes/**'

permissions: write-all


jobs:
  apply:
    name: Apply
    runs-on: ubuntu-latest
    env:
      working-directory: ${{ github.workspace }}/changes
    outputs:
      testoutcome: ${{ steps.test.outcome }}
      external_label: ${{ steps.check-label.outputs.has_label }}
      changedfiles: ${{ steps.get-changed-files.outputs.changedFiles }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Get changed files that were merged
      - name: Get changed files
        id: get-changed-files
        shell: pwsh
        run: |
          $changedFiles = (git diff --name-only ${{ github.event.before }} ${{ github.event.after }}).Split(' ')
          Write-Host "Changed files..."
          $changedFiles
          echo "::set-output name=changedFiles::$changedFiles"

      # Get the PR details from the merge
      - name: Get PR Details
        id: get-pr-details
        shell: bash
        run: |
          commit_sha="${{ github.sha }}"
          repo="${{ github.repository }}"
          token="${{ secrets.GITHUB_TOKEN }}"
          
          response=$(curl --request GET \
            --url https://api.github.com/repos/$repo/commits/$commit_sha/pulls \
            --header "Authorization: Bearer $token" \
            --header "Accept: application/vnd.github.groot-preview+json")
          
          if [ $(echo "$response" | jq 'length') -gt 0 ]; then
            pr_number=$(echo "$response" | jq '.[0].number')
            pr_labels=$(echo "$response" | jq -r '.[0].labels[].name' | tr '\n' ',')
          else
            pr_number=""
            pr_labels=""
          fi

          if [ -z "$pr_number" ]; then
            echo "Error: No pull request number found"
            exit 1
          fi
          
          echo "::set-output name=pr_number::$pr_number"
          echo "::set-output name=pr_labels::$pr_labels"

      # Check for the label "external" and output
      - name: Check for specific label
        id: check-label
        shell: bash
        run: |
          if echo "${{ steps.get-pr-details.outputs.pr_labels }}" | grep -q "Created by external"; then
            echo "PR has label 'Created by external'"
            echo "::set-output name=has_label::true"
          else
            echo "::set-output name=has_label::false"
          fi

      # Get the branch name from the merge and output
      - name: Get branch name
        id: get-branch-name
        shell: bash
        run: |
          pr_number=${{ steps.get-pr-details.outputs.pr_number }}
          branch_name=$(curl --request GET \
            --url https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'content-type: application/json' | jq -r '.head.ref')
          echo "Branch name is $branch_name"
          echo "::set-output name=branch_name::$branch_name"
      
      # Test code
      - name: Test code
        id: test
        shell: pwsh
        run: |
          if (Test-Path -Path ${{ github.workspace }}/changes/changes.txt) {
            Write-Host "Changes file exists"
          } else {
            Write-Host "Changes file does not exist"
            exit 1
          }

          $fileContents = Get-Content -Path ${{ github.workspace }}/changes/changes.txt

          if ($fileContents -eq "Success") {
            Write-Host "File contents are correct"
          } else {
            Write-Host "File contents are incorrect"
            exit 1
          }


  # Roll back changes in the apply job if it fails
  rollback:
    name: Rollback
    needs: apply
    if: always() && needs.apply.result == 'failure'
    runs-on: ubuntu-latest
    env:
      working-directory: ${{ github.workspace }}/changes
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Rollback
        id: rollback
        shell: pwsh
        run: |
          # Git setup
          echo "Rolling back changes..."
          echo "Current commit: ${{ github.sha }}"
          echo "Previous commit: ${{ github.event.before }}"
          echo "Run ID: ${{ github.run_id }}"
          git config user.email "rollback-changes@thing.com"
          git config user.name "rollback-changes"
          git checkout main
          git pull

          # Get info about the previous commit
          $previousCommit = git log -1 --pretty=format:"%H%n%an <%ae>%n%ad%n%s"
          echo "::set-output name=previousCommitAccount::$previousCommit[1]"
          echo "::set-output name=previousCommitMessage::$previousCommit[3]"

          # Check if the previous commit was a rollback
          if (($previousCommit[1] -like "github-actions[bot]*") -and ($previousCommit[3] -like "*Rollback changes - Automatic*")) {
            echo "Previous commit was a Rollback. Creating a Rollback PR for manual review..."
            echo "::set-output name=automaticRollback::false"
            git checkout -b manual-rollback/${{ github.run_id }}
            git revert --no-edit -m 1 HEAD
            git push origin HEAD
          } else {
            echo "Creating automatic rollback PR..."
            echo "::set-output name=automaticRollback::true"
            git checkout -b auto-rollback/${{ github.run_id }}
            git revert --no-edit -m 1 HEAD
            git push origin HEAD
          }

      # Create PR with roll back changes. We cannot push directly to main branch because of branch protection rules
      - name: Create Pull Request for manual review
        if: steps.rollback.outputs.automaticRollback == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl \
          -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls \
          -d '{
            "title": "Rollback changes - Manual Review",
            "body": "This PR rolls back the changes made in ${{ github.sha }}.",
            "head": "manual-rollback/${{ github.run_id }}",
            "base": "main"
          }')
          
          echo "PR_URL=$(echo $response | jq -r '.html_url')" >> $GITHUB_ENV
      
      # Create PR with roll back changes. We cannot push directly to main branch because of branch protection rules
      - name: Create Pull Request for automatic rollback
        if: steps.rollback.outputs.automaticRollback == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          response=$(curl \
          -X POST \
          -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/pulls \
          -d '{
            "title": "Rollback changes - Automatic",
            "body": "This PR rolls back the changes made in ${{ github.sha }}.",
            "head": "auto-rollback/${{ github.run_id }}",
            "base": "main"
          }')
          
          echo "PR_URL=$(echo $response | jq -r '.html_url')" >> $GITHUB_ENV